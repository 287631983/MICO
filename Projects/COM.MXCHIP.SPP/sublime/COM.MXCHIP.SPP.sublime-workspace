{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"DEF",
				"DEFAULT_REMOTE_UDP_PORT	macro"
			],
			[
				"send",
				"sendto(int sockfd, const void *buf, unsigned int len, int flags, const struct sockaddr_t *dest_addr, socklen_t addrlen)	int"
			],
			[
				"uint",
				"uint32_t	typedef"
			],
			[
				"DHCP",
				"DHCP_Disable	DHCPOperationMode"
			],
			[
				"DHC",
				"DHCP_Client	DHCPOperationMode"
			],
			[
				"s",
				"seed	int32_t"
			],
			[
				"b",
				"BundleSeedID	char [32]"
			],
			[
				"ma",
				"manufacturer	char [32]"
			],
			[
				"n",
				"name	char [32]"
			],
			[
				"c",
				"contentLength	uint64_t"
			],
			[
				"uin",
				"uint8_t	typedef"
			],
			[
				"Platform",
				"PlatformWDGReload()	void"
			],
			[
				"wla",
				"wlanBufferLen	macro"
			],
			[
				"RE",
				"REMOTE_CONNECT	enum <anonymous>"
			],
			[
				"_us",
				"_uart_send_mutex	mico_mutex_t"
			],
			[
				"requi",
				"require(X, LABEL)	macro"
			],
			[
				"_uart",
				"_uart_send_mutex	mico_mutex_t"
			],
			[
				"mico_rtos_init_s",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	MxchipStatus"
			],
			[
				"MICO",
				"MICO_NO_WAIT	macro"
			],
			[
				"mico_rtosge",
				"mico_rtos_get_semaphore(mico_semaphore_t *semaphore, unsigned int timeout_ms)	MxchipStatus"
			],
			[
				"mico_rtos_in",
				"mico_rtos_create_thread(mico_thread_t *thread, uint8_t priority, const char *name, mico_thread_function_t function, unsigned int stack_size, void *arg)	MxchipStatus"
			],
			[
				"MICO_",
				"MICO_NEVER_TIMEOUT	macro"
			],
			[
				"eState_",
				"eState_Wlan_Powerdown	SYS_State_t"
			],
			[
				"plat",
				"PlatformUartIn"
			],
			[
				"memc",
				"memcmp(const void *, const void *, size_t)	int"
			],
			[
				"m",
				"mcuPowerSaveEnable	bool"
			],
			[
				"mico",
				"mico_get_time()	uint32_t"
			],
			[
				"re",
				"require_noerr(ERR, LABEL)	macro"
			],
			[
				"mico_rtos",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"mico_t",
				"mico_mutex_t	typedef"
			],
			[
				"mico_rt",
				"mico_rtos_set_semaphore(mico_semaphore_t *semaphore)	MxchipStatus"
			],
			[
				"DE",
				"DEAFULT_REMOTE_SERVER	macro"
			],
			[
				"fl",
				"flashContentInRam	flash_content_t"
			],
			[
				"kNo",
				"kNoErr	macro"
			],
			[
				"lo",
				"localTcpClient_fd	int *"
			],
			[
				"PlatformFlash",
				"PlatformFlashWrite(volatile uint32_t *FlashAddress, uint32_t *Data, uint32_t DataLength)	OSStatus"
			],
			[
				"Platformf",
				"PlatformFlashInitialize()	OSStatus"
			],
			[
				"kc",
				"kChecksumErr	macro"
			],
			[
				"kun",
				"kUnknownErr	macro"
			],
			[
				"kC",
				"kChecksumErr	macro"
			],
			[
				"f",
				"flashContentInRam	flash_content_t"
			],
			[
				"fla",
				"flashContentInRam	flash_content_t"
			],
			[
				"mico_l",
				"mico_log(M, ...)	macro"
			],
			[
				"Button_STANDBY_",
				"Button_STANDBY_PIN	macro"
			],
			[
				"GPIO_Read",
				"GPIO_ReadInputDataBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)	uint8_t"
			],
			[
				"easylink",
				"easylinkClient_fd	int"
			],
			[
				"mico_rtos_set",
				"mico_rtos_set_semaphore(mico_semaphore_t *semaphore)	MxchipStatus"
			],
			[
				"es",
				"eState_Software_Reset	SYS_State_t"
			],
			[
				"mico_rtos_init_",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	MxchipStatus"
			],
			[
				"mico_s",
				"mico_semaphore_t	typedef"
			],
			[
				"e",
				"easyLinkSkip	bool"
			],
			[
				"require_noerr",
				"require_noerr_action(ERR, LABEL, ACTION)	macro"
			],
			[
				"DH",
				"DHCP_Client	DHCPOperationMode"
			],
			[
				"kn",
				"kNoErr	macro"
			],
			[
				"requ",
				"require(X, LABEL)	macro"
			],
			[
				"l",
				"localIp	char [16]"
			],
			[
				"ip",
				"local_ip_addr	char [16]"
			],
			[
				"int",
				"int32_t	typedef"
			],
			[
				"d",
				"dhcpEnable	bool"
			],
			[
				"inet",
				"inet_ntoa(char *s, unsigned int x)	char *"
			],
			[
				"a",
				"allConfigured	config_type"
			],
			[
				"Clos",
				"CloseEasylink2()	int"
			],
			[
				"mico_notify_WIFI_S",
				"mico_notify_WIFI_STATUS_CHANGED	mico_notify_types_t"
			],
			[
				"k",
				"keyLength	int"
			],
			[
				"us",
				"user_key	char [64]"
			],
			[
				"u",
				"user_key	char [64]"
			],
			[
				"key",
				"key_len	int"
			],
			[
				"ke",
				"key_len	int"
			],
			[
				"MX",
				"MXCHIP_SUCCESS	MxchipStatus"
			],
			[
				"require_",
				"require_action(X, LABEL, ACTION)	macro"
			],
			[
				"strn",
				"strncpy(char *restrict, const char *restrict, size_t)	char *"
			],
			[
				"kUn",
				"kUnknownErr	macro"
			],
			[
				"__str",
				"__strdup_trans_dot(char *src)	char *"
			],
			[
				"p",
				"protocol	char [32]"
			],
			[
				"temp",
				"temp2	WiFi_Status_Notify *"
			],
			[
				"kOper",
				"kNotPreparedErr	macro"
			],
			[
				"mico_rtos_i",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"kU",
				"kUnknownErr	macro"
			],
			[
				"req",
				"require_noerr(ERR, LABEL)	macro"
			],
			[
				"in",
				"inContext"
			],
			[
				"mico_rtos_ge",
				"mico_rtos_get_semaphore(mico_semaphore_t *semaphore, unsigned int timeout_ms)	MxchipStatus"
			],
			[
				"t",
				"txt_att	char *"
			],
			[
				"MF",
				"MFi_SERVICE_MFi	macro"
			],
			[
				"mico_rtos_de",
				"mico_rtos_delete_thread(mico_thread_t *thread)	MxchipStatus"
			],
			[
				"mico_re",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"E",
				"ENABLE	FunctionalState"
			],
			[
				"ea",
				"eaBundleSeedID	char *"
			],
			[
				"support",
				"supports5GHzWiFi	bool"
			],
			[
				"supportsAirp",
				"supportsAirPrint	bool"
			],
			[
				"w",
				"supportsWakeOnWireless	bool"
			],
			[
				"wi",
				"wifi_key	char [32]"
			],
			[
				"WAC_N",
				"WAC_NetConfig	network_InitTypeDef_st *"
			],
			[
				"de",
				"destinationSSID	char*"
			],
			[
				"page",
				"pagesNumber	uint8_t"
			],
			[
				"CP_",
				"CP_I2C_RETRY_TIMES	macro"
			],
			[
				"WAC",
				"WAC_OUI_default	const uint8_t[]"
			],
			[
				"OUI",
				"OUI	uint8_t *"
			],
			[
				"El",
				"ElementsLength	uint16_t"
			],
			[
				"su",
				"Support_AirPrint	uint8_t"
			],
			[
				"ui",
				"uint8_t	typedef"
			],
			[
				"sto",
				"stopBits	const int [3]"
			],
			[
				"uart",
				"uartParam	UartParam_t"
			],
			[
				"USART_HardwareFlowControl_",
				"USART_HardwareFlowControl_RTS_CTS	macro"
			],
			[
				"USART_StopBits_",
				"USART_StopBits_1_5	macro"
			],
			[
				"H",
				"HIGH	enum _DL_GPIO_STATE_"
			],
			[
				"GPIO_Mode_",
				"GPIO_Mode_IN	GPIOMode_TypeDef"
			],
			[
				"DL_PULL_",
				"DL_PULL_DOWN	enum _DL_GPIO_PULL_"
			],
			[
				"DL_PULL",
				"DL_PULL_NONE	enum _DL_GPIO_PULL_"
			],
			[
				"GPIO_",
				"GPIO_PORT	GPIO_TypeDef *"
			],
			[
				"mx",
				"mxEnable	enum <anonymous>"
			],
			[
				"ps",
				"ps_disable()	void"
			],
			[
				"STA",
				"STA_MODE	enum _NETWORK_INTERFACE_"
			],
			[
				"clou",
				"cloud_connected	unsigned int"
			],
			[
				"soc",
				"socket_fd	int"
			],
			[
				"UAP",
				"UAP_START	enum <anonymous>"
			],
			[
				"FD",
				"FD_SET	macro"
			],
			[
				"mxch",
				"mxchipTick()	void"
			],
			[
				"STAT",
				"Station	WiFi_Interface"
			],
			[
				"uap_",
				"uap_key	char [32]"
			],
			[
				"def",
				"device_info	mxchipWNet_HA_st  *"
			],
			[
				"MS",
				"MS_TIMER	vu32"
			],
			[
				"st",
				"status	current_state_t"
			],
			[
				"running",
				"running_state	unsigned int"
			],
			[
				"wN",
				"wNetConfig	network_InitTypeDef_st"
			],
			[
				"mxchipWN",
				"mxchipWNet_HA_Init	mxchipWNet_HA_st"
			],
			[
				"mem",
				"memcpy(void *, const void *, size_t)	void *"
			],
			[
				"pa",
				"pairIndex	u8"
			],
			[
				"se",
				"selfKillCount	int32u"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOAppDefine.h",
			"settings":
			{
				"buffer_size": 3345,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/**\n  ******************************************************************************\n  * @file    MICOConfigDelegate.c \n  * @author  William Xu\n  * @version V1.0.0\n  * @date    05-May-2014\n  * @brief   This file provide delegate functons from Easylink function and FTC\n  *          server. \n  ******************************************************************************\n  * @attention\n  *\n  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS\n  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE\n  * TIME. AS A RESULT, MXCHIP Inc. SHALL NOT BE HELD LIABLE FOR ANY\n  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING\n  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE\n  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.\n  *\n  * <h2><center>&copy; COPYRIGHT 2014 MXCHIP Inc.</center></h2>\n  ******************************************************************************\n  */ \n\n#include \"Common.h\"\n#include \"debug.h\"\n#include \"Platform.h\"\n#include \"PlatformUart.h\"\n#include \"EasyLink/EasyLink.h\"\n#include \"external/JSON-C/json.h\"\n#include \"MICO.h\"\n#include \"MICODefine.h\"\n#include \"MICOAppDefine.h\"\n#include \"SppProtocol.h\"  \n#include \"MICOConfigMenu.h\"\n#include \"StringUtils.h\"\n\n#define config_delegate_log(M, ...) custom_log(\"Config Delegate\", M, ##__VA_ARGS__)\n#define config_delegate_log_trace() custom_log_trace(\"Config Delegate\")\n\nstatic mico_timer_t _Led_EL_timer;\n\nstatic void _led_EL_Timeout_handler( void* arg )\n{\n  (void)(arg);\n  Platform_LED_SYS_Set_Status(TRIGGER);\n}\n\nvoid ConfigWillStart( mico_Context_t * const inContext )\n{\n  config_delegate_log_trace();\n  (void)(inContext); \n    /*Led trigger*/\n  mico_init_timer(&_Led_EL_timer, LED_WAC_TRIGGER_INTERVAL, _led_EL_Timeout_handler, NULL);\n  mico_start_timer(&_Led_EL_timer);\n  return;\n}\n\nvoid ConfigWillStop( mico_Context_t * const inContext )\n{\n  config_delegate_log_trace();\n  mico_stop_timer(&_Led_EL_timer);\n  mico_deinit_timer( &_Led_EL_timer );\n  Platform_LED_SYS_Set_Status(OFF);\n  (void)(inContext); \n  return;\n}\n\nvoid ConfigSoftApWillStart(mico_Context_t * const inContext )\n{\n  OSStatus err;\n  sppProtocolInit(inContext);\n  PlatformUartInitialize(inContext);\n\n  err = mico_rtos_create_thread(NULL, MICO_APPLICATION_PRIORITY, \"UART Recv\", uartRecv_thread, 0x500, (void*)inContext );\n  require_noerr_action( err, exit, config_delegate_log(\"ERROR: Unable to start the uart recv thread.\") );\n\n  err = mico_rtos_create_thread(NULL, MICO_APPLICATION_PRIORITY, \"Local UDP\", localUdp_thread, 0x400, (void*)inContext );\n  require_noerr_action( err, exit, config_delegate_log(\"ERROR: Unable to start the local UDP thread.\") );\n\nexit:\n  return;\n}\n\n\nOSStatus ConfigELRecvAuthData(char * userInfo, mico_Context_t * const inContext )\n{\n  config_delegate_log_trace();\n  (void)(inContext);\n  (void)(userInfo);\n  return kNoErr;\n}\n\nOSStatus ConfigCreateReportJsonMessage( mico_Context_t * const inContext )\n{\n  OSStatus err = kNoErr;\n  config_delegate_log_trace();\n  char name[50], *tempString;\n  OTA_Versions_t versions;\n  char rfVersion[50];\n  char *rfVer = NULL, *rfVerTemp = NULL;\n\n  wlan_driver_version( rfVersion, 50 );\n  rfVer = strstr(rfVersion, \"version \");\n  config_delegate_log(\"RF version=%s\", rfVersion);\n  if(rfVer) rfVer = rfVer + strlen(\"version \");\n  rfVerTemp = rfVer;\n\n  for(rfVerTemp = rfVer; *rfVerTemp != ' '; rfVerTemp++);\n  *rfVerTemp = 0x0;\n\n  if(inContext->flashContentInRam.micoSystemConfig.configured == wLanUnConfigured){\n    /*You can upload a specific menu*/\n  }\n\n  mico_rtos_lock_mutex(&inContext->flashContentInRam_mutex);\n  snprintf(name, 50, \"%s(%c%c%c%c%c%c)\",MODEL, \n                                        inContext->micoStatus.mac[9],  inContext->micoStatus.mac[10], \n                                        inContext->micoStatus.mac[12], inContext->micoStatus.mac[13],\n                                        inContext->micoStatus.mac[15], inContext->micoStatus.mac[16]);\n\n  versions.fwVersion = FIRMWARE_REVISION;\n  versions.hdVersion = HARDWARE_REVISION;\n  versions.protocol =  PROTOCOL;\n  versions.rfVersion = NULL;\n\n  json_object *sectors, *sector, *subMenuSectors, *subMenuSector, *mainObject;\n\n  sectors = json_object_new_array();\n  require( sectors, exit );\n\n  err = MICOAddTopMenu(&mainObject, name, sectors, versions);\n  require_noerr(err, exit);\n\n  /*Sector 1*/\n  sector = json_object_new_array();\n  require( sector, exit );\n  err = MICOAddSector(sectors, \"MICO SYSTEM\",    sector);\n  require_noerr(err, exit);\n\n    /*name cell*/\n    err = MICOAddStringCellToSector(sector, \"Device Name\",    inContext->flashContentInRam.micoSystemConfig.name,               \"RW\", NULL);\n    require_noerr(err, exit);\n\n    //Bonjour switcher cell\n    err = MICOAddSwitchCellToSector(sector, \"Bonjour\",        inContext->flashContentInRam.micoSystemConfig.bonjourEnable,      \"RW\");\n    require_noerr(err, exit);\n\n    //RF power save switcher cell\n    err = MICOAddSwitchCellToSector(sector, \"RF power save\",  inContext->flashContentInRam.micoSystemConfig.rfPowerSaveEnable,  \"RW\");\n    require_noerr(err, exit);\n\n    //MCU power save switcher cell\n    err = MICOAddSwitchCellToSector(sector, \"MCU power save\", inContext->flashContentInRam.micoSystemConfig.mcuPowerSaveEnable, \"RW\");\n    require_noerr(err, exit);\n\n    /*sub menu*/\n    subMenuSectors = json_object_new_array();\n    require( subMenuSectors, exit );\n    err = MICOAddMenuCellToSector(sector, \"Detail\", subMenuSectors);\n    require_noerr(err, exit);\n      \n      subMenuSector = json_object_new_array();\n      require( subMenuSector, exit );\n      err = MICOAddSector(subMenuSectors,  \"\",    subMenuSector);\n      require_noerr(err, exit);\n\n        err = MICOAddStringCellToSector(subMenuSector, \"Firmware Rev.\",  FIRMWARE_REVISION, \"RO\", NULL);\n        require_noerr(err, exit);\n        err = MICOAddStringCellToSector(subMenuSector, \"Hardware Rev.\",  HARDWARE_REVISION, \"RO\", NULL);\n        require_noerr(err, exit);\n        err = MICOAddStringCellToSector(subMenuSector, \"MICO OS Rev.\",   system_lib_version(),              \"RO\", NULL);\n        require_noerr(err, exit);\n        err = MICOAddStringCellToSector(subMenuSector, \"RF Driver Rev.\", rfVer,                             \"RO\", NULL);\n        require_noerr(err, exit);\n        err = MICOAddStringCellToSector(subMenuSector, \"Model\",          MODEL,            \"RO\", NULL);\n        require_noerr(err, exit);\n        err = MICOAddStringCellToSector(subMenuSector, \"Manufacturer\",   MANUFACTURER,     \"RO\", NULL);\n        require_noerr(err, exit);\n        err = MICOAddStringCellToSector(subMenuSector, \"Protocol\",       PROTOCOL,         \"RO\", NULL);\n        require_noerr(err, exit);\n\n      subMenuSector = json_object_new_array();\n      err = MICOAddSector(subMenuSectors,  \"WLAN\",    subMenuSector);\n      require_noerr(err, exit);\n      \n        tempString = DataToHexStringWithColons( (uint8_t *)inContext->flashContentInRam.micoSystemConfig.bssid, 6 );\n        err = MICOAddStringCellToSector(subMenuSector, \"BSSID\",        tempString, \"RO\", NULL);\n        require_noerr(err, exit);\n        free(tempString);\n\n        err = MICOAddNumberCellToSector(subMenuSector, \"Channel\",      inContext->flashContentInRam.micoSystemConfig.channel, \"RO\", NULL);\n        require_noerr(err, exit);\n\n        switch(inContext->flashContentInRam.micoSystemConfig.security){\n          case SECURITY_TYPE_NONE:\n            err = MICOAddStringCellToSector(subMenuSector, \"Security\",   \"Open system\", \"RO\", NULL); \n            break;\n          case SECURITY_TYPE_WEP:\n            err = MICOAddStringCellToSector(subMenuSector, \"Security\",   \"WEP\",         \"RO\", NULL); \n            break;\n          case SECURITY_TYPE_WPA_TKIP:\n            err = MICOAddStringCellToSector(subMenuSector, \"Security\",   \"WPA TKIP\",    \"RO\", NULL); \n            break;\n          case SECURITY_TYPE_WPA_AES:\n            err = MICOAddStringCellToSector(subMenuSector, \"Security\",   \"WPA AES\",     \"RO\", NULL); \n            break;\n          case SECURITY_TYPE_WPA2_TKIP:\n            err = MICOAddStringCellToSector(subMenuSector, \"Security\",   \"WPA2 TKIP\",   \"RO\", NULL); \n            break;\n          case SECURITY_TYPE_WPA2_AES:\n            err = MICOAddStringCellToSector(subMenuSector, \"Security\",   \"WPA2 AES\",    \"RO\", NULL); \n            break;\n          case SECURITY_TYPE_WPA2_MIXED:\n            err = MICOAddStringCellToSector(subMenuSector, \"Security\",   \"WPA2 MIXED\",  \"RO\", NULL); \n            break;\n          default:\n            err = MICOAddStringCellToSector(subMenuSector, \"Security\",   \"Auto\",      \"RO\", NULL); \n            break;\n        }\n        require_noerr(err, exit); \n\n        if(inContext->flashContentInRam.micoSystemConfig.keyLength == maxKeyLen){ /*This is a PMK key, generated by user key in WPA security type*/\n          tempString = calloc(maxKeyLen+1, 1);\n          require_action(tempString, exit, err=kNoMemoryErr);\n          memcpy(tempString, inContext->flashContentInRam.micoSystemConfig.key, maxKeyLen);\n          err = MICOAddStringCellToSector(subMenuSector, \"PMK\",          tempString, \"RO\", NULL);\n          require_noerr(err, exit);\n          free(tempString);\n        }\n        else{\n          err = MICOAddStringCellToSector(subMenuSector, \"KEY\",          inContext->flashContentInRam.micoSystemConfig.user_key,  \"RO\", NULL);\n          require_noerr(err, exit);\n        }\n\n        /*DHCP cell*/\n        err = MICOAddSwitchCellToSector(subMenuSector, \"DHCP\",        inContext->flashContentInRam.micoSystemConfig.dhcpEnable,   \"RO\");\n        require_noerr(err, exit);\n        /*Local cell*/\n        err = MICOAddStringCellToSector(subMenuSector, \"IP address\",  inContext->micoStatus.localIp,   \"RO\", NULL);\n        require_noerr(err, exit);\n        /*Netmask cell*/\n        err = MICOAddStringCellToSector(subMenuSector, \"Net Mask\",    inContext->micoStatus.netMask,   \"RO\", NULL);\n        require_noerr(err, exit);\n        /*Gateway cell*/\n        err = MICOAddStringCellToSector(subMenuSector, \"Gateway\",     inContext->micoStatus.gateWay,   \"RO\", NULL);\n        require_noerr(err, exit);\n        /*DNS server cell*/\n        err = MICOAddStringCellToSector(subMenuSector, \"DNS Server\",  inContext->micoStatus.dnsServer, \"RO\", NULL);\n        require_noerr(err, exit);\n\n  /*Sector 3*/\n  sector = json_object_new_array();\n  require( sector, exit );\n  err = MICOAddSector(sectors, \"WLAN\",           sector);\n  require_noerr(err, exit);\n\n    err = MICOAddStringCellToSector(sector, \"Wi-Fi\",        inContext->flashContentInRam.micoSystemConfig.ssid,     \"RW\", NULL);\n    require_noerr(err, exit);\n\n    err = MICOAddStringCellToSector(sector, \"Password\",     inContext->flashContentInRam.micoSystemConfig.user_key, \"RW\", NULL);\n    require_noerr(err, exit);\n\n  /*Sector 4*/\n  sector = json_object_new_array();\n  require( sector, exit );\n  err = MICOAddSector(sectors, \"IP connections\",           sector);\n  require_noerr(err, exit);\n\n    // SPP protocol remote server connection enable\n    err = MICOAddNumberCellToSector(sector, \"Local UDP Port\",   inContext->flashContentInRam.appConfig.localUDPPort,   \"RW\", NULL);\n    require_noerr(err, exit);\n    \n\n    // SPP protocol remote server connection enable\n    err = MICOAddSwitchCellToSector(sector, \"Connect SPP Server\",   inContext->flashContentInRam.appConfig.remoteServerEnable,   \"RW\");\n    require_noerr(err, exit);\n\n    //Seerver address cell\n    err = MICOAddStringCellToSector(sector, \"SPP Server\",           inContext->flashContentInRam.appConfig.remoteServerDomain,   \"RW\", NULL);\n    require_noerr(err, exit);\n\n    //Seerver port cell\n    err = MICOAddNumberCellToSector(sector, \"SPP Server Port\",      inContext->flashContentInRam.appConfig.remoteServerPort,   \"RW\", NULL);\n    require_noerr(err, exit);\n\n  /*Sector 5*/\n  sector = json_object_new_array();\n  require( sector, exit );\n  err = MICOAddSector(sectors, \"MCU IOs\",            sector);\n  require_noerr(err, exit);\n\n    /*UART Baurdrate cell*/\n    json_object *selectArray;\n    selectArray = json_object_new_array();\n    require( selectArray, exit );\n    json_object_array_add(selectArray, json_object_new_int(9600));\n    json_object_array_add(selectArray, json_object_new_int(19200));\n    json_object_array_add(selectArray, json_object_new_int(38400));\n    json_object_array_add(selectArray, json_object_new_int(57600));\n    json_object_array_add(selectArray, json_object_new_int(115200));\n    err = MICOAddNumberCellToSector(sector, \"Baurdrate\", 115200, \"RW\", selectArray);\n    require_noerr(err, exit);\n\n  inContext->micoStatus.easylink_report = mainObject;\n  mico_rtos_unlock_mutex(&inContext->flashContentInRam_mutex);\n  \nexit:\n    return err;\n\n}\n\nOSStatus ConfigIncommingJsonMessage( const char *input, mico_Context_t * const inContext )\n{\n  OSStatus err = kNoErr;\n  json_object *new_obj;\n  config_delegate_log_trace();\n\n  new_obj = json_tokener_parse(input);\n  require_action(new_obj, exit, err = kUnknownErr);\n  config_delegate_log(\"Recv config object=%s\", json_object_to_json_string(new_obj));\n  mico_rtos_lock_mutex(&inContext->flashContentInRam_mutex);\n  json_object_object_foreach(new_obj, key, val) {\n    if(!strcmp(key, \"Device Name\")){\n      strncpy(inContext->flashContentInRam.micoSystemConfig.name, json_object_get_string(val), maxNameLen);\n    }else if(!strcmp(key, \"RF power save\")){\n      inContext->flashContentInRam.micoSystemConfig.rfPowerSaveEnable = json_object_get_boolean(val);\n    }else if(!strcmp(key, \"MCU power save\")){\n      inContext->flashContentInRam.micoSystemConfig.mcuPowerSaveEnable = json_object_get_boolean(val);\n    }else if(!strcmp(key, \"Bonjour\")){\n      inContext->flashContentInRam.micoSystemConfig.bonjourEnable = json_object_get_boolean(val);\n    }else if(!strcmp(key, \"Wi-Fi\")){\n      strncpy(inContext->flashContentInRam.micoSystemConfig.ssid, json_object_get_string(val), maxSsidLen);\n      inContext->flashContentInRam.micoSystemConfig.channel = 0;\n      memset(inContext->flashContentInRam.micoSystemConfig.bssid, 0x0, 6);\n      inContext->flashContentInRam.micoSystemConfig.security = SECURITY_TYPE_AUTO;\n      memcpy(inContext->flashContentInRam.micoSystemConfig.key, inContext->flashContentInRam.micoSystemConfig.user_key, maxKeyLen);\n      inContext->flashContentInRam.micoSystemConfig.keyLength = inContext->flashContentInRam.micoSystemConfig.user_keyLength;\n    }else if(!strcmp(key, \"Password\")){\n      inContext->flashContentInRam.micoSystemConfig.security = SECURITY_TYPE_AUTO;\n      strncpy(inContext->flashContentInRam.micoSystemConfig.key, json_object_get_string(val), maxKeyLen);\n      strncpy(inContext->flashContentInRam.micoSystemConfig.user_key, json_object_get_string(val), maxKeyLen);\n      inContext->flashContentInRam.micoSystemConfig.keyLength = strlen(inContext->flashContentInRam.micoSystemConfig.key);\n      inContext->flashContentInRam.micoSystemConfig.user_keyLength = strlen(inContext->flashContentInRam.micoSystemConfig.key);\n    }else if(!strcmp(key, \"Connect SPP Server\")){\n      inContext->flashContentInRam.appConfig.remoteServerEnable = json_object_get_boolean(val);\n    }else if(!strcmp(key, \"SPP Server\")){\n      strncpy(inContext->flashContentInRam.appConfig.remoteServerDomain, json_object_get_string(val), 64);\n    }else if(!strcmp(key, \"SPP Server Port\")){\n      inContext->flashContentInRam.appConfig.remoteServerPort = json_object_get_int(val);\n    }else if(!strcmp(key, \"Local UDP Port\")){\n      inContext->flashContentInRam.appConfig.localUDPPort = json_object_get_int(val);\n    }else if(!strcmp(key, \"Baurdrate\")){\n      inContext->flashContentInRam.appConfig.USART_BaudRate = json_object_get_int(val);\n    }\n  }\n  json_object_put(new_obj);\n  mico_rtos_unlock_mutex(&inContext->flashContentInRam_mutex);\n\n  inContext->flashContentInRam.micoSystemConfig.configured = allConfigured;\n  MICOUpdateConfiguration(inContext);\n\nexit:\n  return err; \n}",
			"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOConfigDelegate.c",
			"file_size": 16266,
			"file_write_time": 1403859343000000,
			"settings":
			{
				"buffer_size": 15910,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOAppEntrance.c",
			"settings":
			{
				"buffer_size": 3119,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/LocalUdp.c",
			"settings":
			{
				"buffer_size": 3755,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/LocalTcpServer.c",
			"settings":
			{
				"buffer_size": 5531,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/SppProtocol.c",
			"settings":
			{
				"buffer_size": 2776,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 287.0,
		"selected_items":
		[
			[
				"",
				"Package Control: Install Package"
			],
			[
				"git",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"v",
				"View: Toggle Side Bar"
			],
			[
				"Cscope:Look up symbol",
				"Cscope: Look up symbol"
			],
			[
				":",
				"View: Toggle Tabs"
			],
			[
				":q",
				"Set Syntax: SQL"
			],
			[
				"Package Control: install		",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: Lorem ipsum"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/UartRecv.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOConfigMenu.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/Support/MDNSUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOEntrance.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICODefine.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Platform.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOBonjour.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/WAC/MFiSAPServer.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOConfigServer.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/HAL_EMW3162.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/EasyLink/EasyLink.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOAppEntrance.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/WAC/MFi-SAP.c",
		"/Users/William/Downloads/libtinysrp-0.7.5/clitest.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/WAC/WACTLV.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/Support/RingBufferUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/PlatformUart.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Platform/PlatformUART.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/SppProtocol.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/MDNSUtils.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOConfigMenu.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/LocalTcpServer.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOConfigDelegate.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Projects/COM.MXCHIP.SPP/sublime/COM.MXCHIP.SPP.sublime-project",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/HAL_Open1081.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/json_object.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/json_object_private.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/linkhash.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/json_object.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/arraylist.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/linkhash.c",
		"/Users/william/Develop/Clang_lib/ARMCC/include/stdlib.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/SppProtocol.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/HAL_EMW3161.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOAppDefine.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/bits.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/arraylist.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/mdns.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/mico_main.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_wlan.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/mico_define.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/mico_configuration_server.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/EasyLink.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/EasyLink.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/mico_flash_configuration.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/mico_app_define.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/mico_wac.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MFi-SAP.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_callback.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/Support/mdns.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/MICOAlgorithm.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/MICOAES.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MFi-SAP.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/Bonjour.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/Support/HTTPUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/WACLogging.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/User_EasyLink.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/external/JSON-C/json_object.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_socket.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/printbuf.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/mico_app_main.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/Demo2_COM.MXCHIP.SPP/mico_app_main.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/Demo2_COM.MXCHIP.SPP/LocalTcpServer.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/Demo2_COM.MXCHIP.SPP/stm32f2xx_it.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_wlan.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_socket.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_rtos.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_callback.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_api.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_callback.c",
		"/Users/William/Library/Application Support/Sublime Text 2/Packages/SublimeClang/clang/include/stdbool.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/Common.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_config.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_rng.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Projects/Demo2_COM.MXCHIP.SPP/sublime/COM.MXCHIP.SPP.sublime-project",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/STM32F2xx_StdPeriph_Driver/CMSIS/core_cm3.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_adc.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_system_monitor.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_system_monitor.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/SocketUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/Demo2_COM.MXCHIP.SPP/mico_app_define.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/STM32F2xx_StdPeriph_Driver/inc/stm32f2xx.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/EasyLink.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/mico_system_monitor.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/StringUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/Debug.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/platform.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mxchipWNET.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_algorithm.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mico_utils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/mxchipWNet_TypeDef.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/PlatformFlash.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/encrypt.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/AESUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/mdns.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/HTTPUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/HTTPUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/RingBufferUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/StringUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/TimeUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/TLVUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/URLUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/AESUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/Demo2_COM.MXCHIP.SPP/SppProtocol.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/Demo2_COM.MXCHIP.SPP/RemoteTcpClient.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/Demo2_COM.MXCHIP.SPP/UartRecv.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/STM32F2xx_StdPeriph_Driver/inc/stm32f2xx_usart.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/Demo2_COM.MXCHIP.SPP/SppProtocol.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/PlatformWDG.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/PlatformWDG.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/Demo2_COM.MXCHIP.SPP/User_EasyLink.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/MICO/mico_define.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/EasyLink.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/URLUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/TLVUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/TimeUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/SocketUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/RingBufferUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/Demo2_COM.MXCHIP.SPP/HaProtocol.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/PlatformUart.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/system_stm32f2xx.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/mico_system_monitor",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Platform/PlatformWDG.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/PlatformLogging.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/PlatformFlash.c"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"<open folders>",
			"",
			"<open folders>",
			"/Users/william/Develop/E-DICE",
			"",
			"<open folders>",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/Project/复件 Data_Send&Recv",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/Project/STM32F4xx_StdPeriph_Examples"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"sppWlanCommandProcess",
			"clientLoopBackFd",
			"sppUartCommandProcess",
			"_recved_uart_loopback_fd",
			"sppUartCommandProcess",
			"_recved_uart_loopback_fd",
			"RECVED_UART_DATA_LOOPBACK_PORT",
			"LOCAL_TCP_SERVER_LOOPBACK_PORT",
			"loopBackPortTable",
			"UART_RX_BUF_SIZE",
			"platform_uart_receive_bytes",
			"rx_buffer",
			"ring_buffer_t",
			"service_name",
			"_bonjour_thread",
			"@",
			"__MFiSAP_Exchange_ServerM1",
			"MFiSAP_Exchange",
			"_HandleState_WaitingForAuthSetupMessage",
			"_HandleState_HandleAuthSetupMessage",
			"kWACTLV_TypeLengthSize",
			"kWACTLV_WiFiSSID",
			"Platform_Enter_STANDBY",
			"eState_Standby",
			"threadexit",
			"reboot",
			"easylink_sem",
			"lh_table_new",
			"JSON_OBJECT_DEF_HASH_ENTRIES",
			">>",
			"json_object_array_add",
			">>",
			"json_object_array_add",
			"array_list_add",
			"array_list_add\narray_list_add\narray_list_add",
			"array_list_add\narray_list_add",
			"array_list_add",
			"REFCOUNT_DEBUG",
			"json_object_new",
			"lh_table_insert",
			"lh_table_resize",
			"lh_table_new",
			"size",
			"call\ncall",
			"calloc",
			"realloc",
			"0.66",
			"json_max",
			"arr->size",
			"arr->length",
			"array_list_add\narray_list_add\narray_list_add",
			"array_list_add\narray_list_add",
			"array_list_add",
			"ARRAY_LIST_DEFAULT_SIZE",
			"JSON_OBJECT_DEF_HASH_ENTRIES",
			"lh_abort",
			"_table_new",
			"_LocalConfigRespondInComingMessage",
			"EXTI_Lin",
			"EXTI_Line1",
			"EXTI15_10_IRQn",
			"EXTI1_IRQn",
			"applyNewConfiguration",
			"_WACServerEngine",
			"_HandleState_HandleConfiguredMessage",
			"eState_Complete",
			"_WACServerEngine",
			"eState_Complete",
			"EasyLinkNotify_DHCPCompleteHandler",
			"_mfi_bonjour_init",
			"apply",
			"EasyLinkNotify_WiFIParaChangedHandler",
			"applyNewConfiguration",
			"apply",
			"applyNewConfiguration",
			"apply",
			"easylink_thread",
			"http_server_thread",
			"applyNewConfiguration",
			"_mfi_bonjour_init",
			"_interface",
			"LED_EL_TRIGGER_INTERVAL",
			"_Led_EL_timer",
			"_led_EL_Timeout_handler",
			"wiced_result_t",
			"service_name",
			"BONJOUR_SERVICE",
			"firmwareRevision",
			"wac_parameters",
			"_to_json_string",
			"json_object_to_json_string",
			"free",
			"_FTCRespondInComingMessage",
			"_connectFTCServer",
			"EasyLinkCreateReportJsonHTTPMessage",
			"socklen_t",
			"backlog",
			"net_para_st",
			"*             ",
			"TIMEVAL_st",
			"mico_rtos_is_current_thread",
			"CMSIS MISRA-C:2004 Compliance Exceptions	",
			"ADC driver modules",
			"Initialization and Configuration functions",
			"MSG_DONTWAIT",
			"Swap32",
			"mxEnable",
			"wLanUnConfigured",
			"timeout_ms",
			"DEFAULT_SYSTEM_MONITOR_PERIOD",
			"_report_status_sem",
			");\n",
			"exit",
			"_get_status",
			"platform_uart_receive_bytes",
			"remote",
			"_mutex",
			"check_sum",
			"check_sm",
			"check_sum",
			"hal_uart_get_one_packet",
			"Continue",
			"update",
			"flashContentInRam_mutex",
			"set_network_state",
			"tx_complete",
			"uart_wakeup_thread",
			"Rx_irq_handler"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOAppDefine.h",
					"settings":
					{
						"buffer_size": 3345,
						"regions":
						{
						},
						"selection":
						[
							[
								2836,
								2823
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 548.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOConfigDelegate.c",
					"settings":
					{
						"buffer_size": 15910,
						"regions":
						{
						},
						"selection":
						[
							[
								11200,
								11200
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3631.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOAppEntrance.c",
					"settings":
					{
						"buffer_size": 3119,
						"regions":
						{
						},
						"selection":
						[
							[
								2088,
								2111
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 64.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/LocalUdp.c",
					"settings":
					{
						"buffer_size": 3755,
						"regions":
						{
						},
						"selection":
						[
							[
								1914,
								1926
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 451.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/LocalTcpServer.c",
					"settings":
					{
						"buffer_size": 5531,
						"regions":
						{
						},
						"selection":
						[
							[
								2760,
								2760
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 339.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/SppProtocol.c",
					"settings":
					{
						"buffer_size": 2776,
						"regions":
						{
						},
						"selection":
						[
							[
								1857,
								1867
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 142.0
	},
	"output.exec":
	{
		"height": 100.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"micode",
				"MICO/MICODefine.h"
			],
			[
				"",
				"STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 229.0,
	"status_bar_visible": true
}
