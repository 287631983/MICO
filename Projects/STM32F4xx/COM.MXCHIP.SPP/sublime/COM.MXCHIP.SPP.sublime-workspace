{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"mico_rtos_mu",
				"mico_rtos_lock_mutex(mico_mutex_t *mutex)	OSStatus"
			],
			[
				"kNot",
				"kNotInitializedErr	macro"
			],
			[
				"in",
				"initialized	bool"
			],
			[
				"kT",
				"kTypeErr	macro"
			],
			[
				"re",
				"require_noerr(ERR, LABEL)	macro"
			],
			[
				"platform_gpio_",
				"platform_gpio_irq_enable(const platform_gpio_t *gpio, platform_gpio_irq_trigger_t trigger, platform_gpio_irq_callback_t handler, void *arg)	OSStatus"
			],
			[
				"MICO_I2",
				"MICO_I2C_NONE	mico_i2c_t"
			],
			[
				"MICO_AD",
				"MICO_ADC_NONE	mico_adc_t"
			],
			[
				"MICO",
				"MICO_ADC_MAX	mico_adc_t"
			],
			[
				"ch",
				"chunkedDataBufferLen	unsigned int"
			],
			[
				"req",
				"require_action(X, LABEL, ACTION)	macro"
			],
			[
				"c",
				"onClearCallback	OSStatus (*)(struct _HTTPHeader_t *, void *)"
			],
			[
				"kUn",
				"kUnknownErr	macro"
			],
			[
				"uint",
				"uint32_t	typedef"
			],
			[
				"o",
				"onReceivedDataCallback	bool (*)(struct _HTTPHeader_t *)"
			],
			[
				"wla",
				"wLanUnConfigured	Config_State_t"
			],
			[
				"WL_",
				"WL_GPIO1_PIN	macro"
			],
			[
				"platform",
				"platform_log(M, ...)	macro"
			],
			[
				"mico",
				"mico_flash_t	typedef"
			],
			[
				"pi",
				"pin_rx	const platform_pin_mapping_t *"
			],
			[
				"MicoGpio",
				"MicoGpioEnableIRQ(mico_gpio_t gpio, mico_gpio_irq_trigger_t trigger, mico_gpio_irq_handler_t handler, void *arg)	OSStatus"
			],
			[
				"MicoGP",
				"MicoGpioEnableIRQ(mico_gpio_t gpio, mico_gpio_irq_trigger_t trigger, mico_gpio_irq_handler_t handler, void *arg)	OSStatus"
			],
			[
				"OUTPUT_OD",
				"OUTPUT_OPEN_DRAIN_NO_PULL	mico_gpio_config_t"
			],
			[
				"MICOSYS",
				"MicoSystemStandBy()	void"
			],
			[
				"MicoWd",
				"MicoWdgInitialize(uint32_t timeout)	OSStatus"
			],
			[
				"MicoR",
				"MicoRtcSetTime(mico_rtc_time_t *time)	OSStatus"
			],
			[
				"m",
				"month	uint8_t"
			],
			[
				"MICO_I",
				"MICO_I2C_CP	macro"
			],
			[
				"ke",
				"keyLength	int"
			],
			[
				"s",
				"security	SECURITY_TYPE_E"
			],
			[
				"MicoGpioO",
				"MicoGpioOutputLow(mico_gpio_t gpio)	OSStatus"
			],
			[
				"k",
				"kBackoffErr	macro"
			],
			[
				"mico_rtos_in",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	OSStatus"
			],
			[
				"tm",
				"tm_wday	int"
			],
			[
				"tm_m",
				"tm_mon	int"
			],
			[
				"tm_",
				"tm_mday	int"
			],
			[
				"mico_rtos_d",
				"mico_rtos_delete_thread(mico_thread_t *thread)	OSStatus"
			],
			[
				"MICORe",
				"MICORemoveNotification(mico_notify_types_t notify_type, void *functionAddress)	OSStatus"
			],
			[
				"I",
				"INADDR_ANY	macro"
			],
			[
				"mico_th",
				"mico_thread_sleep	macro"
			],
			[
				"MICOWlan",
				"MICOWlanEnablePowerSave	macro"
			],
			[
				"MICOWlanS",
				"MICOWlanStopEasyLink	macro"
			],
			[
				"MICOW",
				"MICOWlanGetIPStatus	macro"
			],
			[
				"MICOWl",
				"MICOWlanGetIPStatus	macro"
			],
			[
				"MICOWlanGe",
				"MICOWlanGetIPStatus	macro"
			],
			[
				"MICOWlanStart",
				"MICOWlanStartAdv	macro"
			],
			[
				"micoGet",
				"micoGetMemoryInfo	macro"
			],
			[
				"DEF",
				"DEFAULT_REMOTE_UDP_PORT	macro"
			],
			[
				"send",
				"sendto(int sockfd, const void *buf, unsigned int len, int flags, const struct sockaddr_t *dest_addr, socklen_t addrlen)	int"
			],
			[
				"DHCP",
				"DHCP_Disable	DHCPOperationMode"
			],
			[
				"DHC",
				"DHCP_Client	DHCPOperationMode"
			],
			[
				"b",
				"BundleSeedID	char [32]"
			],
			[
				"ma",
				"manufacturer	char [32]"
			],
			[
				"n",
				"name	char [32]"
			],
			[
				"uin",
				"uint8_t	typedef"
			],
			[
				"Platform",
				"PlatformWDGReload()	void"
			],
			[
				"RE",
				"REMOTE_CONNECT	enum <anonymous>"
			],
			[
				"_us",
				"_uart_send_mutex	mico_mutex_t"
			],
			[
				"requi",
				"require(X, LABEL)	macro"
			],
			[
				"_uart",
				"_uart_send_mutex	mico_mutex_t"
			],
			[
				"mico_rtos_init_s",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	MxchipStatus"
			],
			[
				"mico_rtosge",
				"mico_rtos_get_semaphore(mico_semaphore_t *semaphore, unsigned int timeout_ms)	MxchipStatus"
			],
			[
				"MICO_",
				"MICO_NEVER_TIMEOUT	macro"
			],
			[
				"eState_",
				"eState_Wlan_Powerdown	SYS_State_t"
			],
			[
				"plat",
				"PlatformUartIn"
			],
			[
				"memc",
				"memcmp(const void *, const void *, size_t)	int"
			],
			[
				"mico_rtos",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"mico_t",
				"mico_mutex_t	typedef"
			],
			[
				"mico_rt",
				"mico_rtos_set_semaphore(mico_semaphore_t *semaphore)	MxchipStatus"
			],
			[
				"DE",
				"DEAFULT_REMOTE_SERVER	macro"
			],
			[
				"fl",
				"flashContentInRam	flash_content_t"
			],
			[
				"kNo",
				"kNoErr	macro"
			],
			[
				"lo",
				"localTcpClient_fd	int *"
			],
			[
				"PlatformFlash",
				"PlatformFlashWrite(volatile uint32_t *FlashAddress, uint32_t *Data, uint32_t DataLength)	OSStatus"
			],
			[
				"Platformf",
				"PlatformFlashInitialize()	OSStatus"
			],
			[
				"kc",
				"kChecksumErr	macro"
			],
			[
				"kun",
				"kUnknownErr	macro"
			],
			[
				"kC",
				"kChecksumErr	macro"
			],
			[
				"f",
				"flashContentInRam	flash_content_t"
			],
			[
				"fla",
				"flashContentInRam	flash_content_t"
			],
			[
				"mico_l",
				"mico_log(M, ...)	macro"
			],
			[
				"Button_STANDBY_",
				"Button_STANDBY_PIN	macro"
			],
			[
				"GPIO_Read",
				"GPIO_ReadInputDataBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)	uint8_t"
			],
			[
				"easylink",
				"easylinkClient_fd	int"
			],
			[
				"mico_rtos_set",
				"mico_rtos_set_semaphore(mico_semaphore_t *semaphore)	MxchipStatus"
			],
			[
				"es",
				"eState_Software_Reset	SYS_State_t"
			],
			[
				"mico_rtos_init_",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	MxchipStatus"
			],
			[
				"mico_s",
				"mico_semaphore_t	typedef"
			],
			[
				"e",
				"easyLinkSkip	bool"
			],
			[
				"require_noerr",
				"require_noerr_action(ERR, LABEL, ACTION)	macro"
			],
			[
				"DH",
				"DHCP_Client	DHCPOperationMode"
			],
			[
				"kn",
				"kNoErr	macro"
			],
			[
				"requ",
				"require(X, LABEL)	macro"
			],
			[
				"l",
				"localIp	char [16]"
			],
			[
				"ip",
				"local_ip_addr	char [16]"
			],
			[
				"int",
				"int32_t	typedef"
			],
			[
				"d",
				"dhcpEnable	bool"
			],
			[
				"inet",
				"inet_ntoa(char *s, unsigned int x)	char *"
			],
			[
				"a",
				"allConfigured	config_type"
			],
			[
				"Clos",
				"CloseEasylink2()	int"
			],
			[
				"mico_notify_WIFI_S",
				"mico_notify_WIFI_STATUS_CHANGED	mico_notify_types_t"
			],
			[
				"us",
				"user_key	char [64]"
			],
			[
				"u",
				"user_key	char [64]"
			],
			[
				"key",
				"key_len	int"
			],
			[
				"MX",
				"MXCHIP_SUCCESS	MxchipStatus"
			],
			[
				"require_",
				"require_action(X, LABEL, ACTION)	macro"
			],
			[
				"strn",
				"strncpy(char *restrict, const char *restrict, size_t)	char *"
			],
			[
				"__str",
				"__strdup_trans_dot(char *src)	char *"
			],
			[
				"p",
				"protocol	char [32]"
			],
			[
				"temp",
				"temp2	WiFi_Status_Notify *"
			],
			[
				"kOper",
				"kNotPreparedErr	macro"
			],
			[
				"mico_rtos_i",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"kU",
				"kUnknownErr	macro"
			],
			[
				"mico_rtos_ge",
				"mico_rtos_get_semaphore(mico_semaphore_t *semaphore, unsigned int timeout_ms)	MxchipStatus"
			],
			[
				"t",
				"txt_att	char *"
			],
			[
				"MF",
				"MFi_SERVICE_MFi	macro"
			],
			[
				"mico_rtos_de",
				"mico_rtos_delete_thread(mico_thread_t *thread)	MxchipStatus"
			],
			[
				"mico_re",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"E",
				"ENABLE	FunctionalState"
			],
			[
				"ea",
				"eaBundleSeedID	char *"
			],
			[
				"support",
				"supports5GHzWiFi	bool"
			],
			[
				"supportsAirp",
				"supportsAirPrint	bool"
			],
			[
				"w",
				"supportsWakeOnWireless	bool"
			],
			[
				"wi",
				"wifi_key	char [32]"
			],
			[
				"WAC_N",
				"WAC_NetConfig	network_InitTypeDef_st *"
			],
			[
				"de",
				"destinationSSID	char*"
			],
			[
				"page",
				"pagesNumber	uint8_t"
			],
			[
				"CP_",
				"CP_I2C_RETRY_TIMES	macro"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/William/Develop/MiCO/Platform/Drivers/spi_flash/spi_flash.c",
			"settings":
			{
				"buffer_size": 15377,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform.h",
			"settings":
			{
				"buffer_size": 4637,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 1042 files for \"USE_MICO_SPI_FLASH\" (whole word)\n\n/Users/William/Develop/MiCO/Platform/BoardConfig/FRDM_K64/platform.h:\n  283  } mico_flash_t;\n  284  \n  285: #define USE_MICO_SPI_FLASH\n  286  //#define SFLASH_SUPPORT_MACRONIX_PART \n  287  //#define SFLASH_SUPPORT_SST_PARTS\n\n/Users/William/Develop/MiCO/Platform/BoardConfig/LPCXpresso54102/platform.h:\n  160  #define GPIO_EASYLINK_PIN       18\n  161  #define GPIO_EASYLINK_INDEX	PININTSELECT7	/* PININT index used for GPIO mapping */\n  162: #define USE_MICO_SPI_FLASH\n  163  \n  164  //#define SFLASH_SUPPORT_MACRONIX_PART \n\n/Users/William/Develop/MiCO/Platform/BoardConfig/SampleBoard01/platform.h:\n  177  } mico_flash_t;\n  178  \n  179: #define USE_MICO_SPI_FLASH              //Use Mico driver of spi_flash. In Common/Drivers/spi_flash/\n  180  //#define SFLASH_SUPPORT_MACRONIX_PART \n  181  //#define SFLASH_SUPPORT_SST_PARTS\n\n/Users/William/Develop/MiCO/Platform/Drivers/spi_flash/spi_flash_platform.c:\n   10  #include \"spi_flash_platform_interface.h\"\n   11  \n   12: #if defined ( USE_MICO_SPI_FLASH )\n   13  \n   14  extern const spi_flash_device_t spi_flash_device\n\n/Users/William/Develop/MiCO/Platform/MCU/mico_platform_common.c:\n   84  const char* flash_name[] =\n   85  { \n   86: #ifdef USE_MICO_SPI_FLASH\n   87    [MICO_SPI_FLASH] = \"SPI\", \n   88  #endif\n\n/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_flash.c:\n   36  //#include \"platform_config.h\"\n   37  #include \"stdio.h\"\n   38: #ifdef USE_MICO_SPI_FLASH\n   39  #include \"spi_flash.h\"\n   40  #endif\n   ..\n   62  /* Private macro -------------------------------------------------------------*/\n   63  /* Private variables ---------------------------------------------------------*/\n   64: #ifdef USE_MICO_SPI_FLASH\n   65  static sflash_handle_t sflash_handle = {0x0, 0x0, SFLASH_WRITE_NOT_ALLOWED};\n   66  #endif\n   ..\n   73  static OSStatus internalFlashByteWrite( volatile uint32_t* FlashAddress, uint8_t* Data ,uint32_t DataLength );\n   74  static OSStatus internalFlashFinalize( void );\n   75: #ifdef USE_MICO_SPI_FLASH\n   76  static OSStatus spiFlashErase(uint32_t StartAddress, uint32_t EndAddress);\n   77  #endif\n   ..\n   83  //     return internalFlashInitialize();    \n   84  //   }\n   85: // #ifdef USE_MICO_SPI_FLASH\n   86  //   else if(flash == MICO_SPI_FLASH){\n   87  //     if(sflash_handle.device_id)\n   ..\n  108      require_noerr(err, exit);\n  109    }\n  110: #ifdef USE_MICO_SPI_FLASH\n  111    else if( driver->peripheral->flash_type == FLASH_TYPE_SPI ){\n  112      err = init_sflash( &sflash_handle, 0, SFLASH_WRITE_ALLOWED );\n  ...\n  136  //     return internalFlashErase(StartAddress, EndAddress);    \n  137  //   }\n  138: // #ifdef USE_MICO_SPI_FLASH\n  139  //   else if(flash == MICO_SPI_FLASH){\n  140  //     if(StartAddress>=EndAddress || EndAddress > SPI_FLASH_END_ADDRESS)\n  ...\n  162      require_noerr(err, exit_with_mutex);\n  163    }\n  164: #ifdef USE_MICO_SPI_FLASH\n  165    else if( driver->peripheral->flash_type == FLASH_TYPE_SPI ){\n  166      err = spiFlashErase(StartAddress, EndAddress);\n  ...\n  190  //     return internalFlashWrite(FlashAddress, (uint32_t *)Data, DataLength);    \n  191  //   }\n  192: // #ifdef USE_MICO_SPI_FLASH\n  193  //   else if(flash == MICO_SPI_FLASH){\n  194  //     if( *FlashAddress + DataLength > SPI_FLASH_END_ADDRESS + 1)\n  ...\n  219      require_noerr(err, exit_with_mutex);\n  220    }\n  221: #ifdef USE_MICO_SPI_FLASH\n  222    else if( driver->peripheral->flash_type == FLASH_TYPE_SPI ){\n  223      err = sflash_write( &sflash_handle, *FlashAddress, Data, DataLength );\n  ...\n  251  //     return kNoErr;\n  252  //   }\n  253: // #ifdef USE_MICO_SPI_FLASH\n  254  //   else if(flash == MICO_SPI_FLASH){\n  255  //     if( *FlashAddress + DataLength > SPI_FLASH_END_ADDRESS + 1)\n  ...\n  279      *FlashAddress += DataLength;\n  280    }\n  281: #ifdef USE_MICO_SPI_FLASH\n  282    else if( driver->peripheral->flash_type == FLASH_TYPE_SPI ){\n  283      err = sflash_read( &sflash_handle, *FlashAddress, Data, DataLength );\n  ...\n  304  //     return internalFlashFinalize();    \n  305  //   }\n  306: // #ifdef USE_MICO_SPI_FLASH\n  307  //   else if(flash == MICO_SPI_FLASH){\n  308  //     sflash_handle.device_id = 0x0;\n  ...\n  329      require_noerr(err, exit); \n  330    }\n  331: #ifdef USE_MICO_SPI_FLASH\n  332    else if( driver->peripheral->flash_type == FLASH_TYPE_SPI ){\n  333      sflash_handle.device_id = 0x0;\n  ...\n  381  }\n  382  \n  383: #ifdef USE_MICO_SPI_FLASH\n  384  OSStatus spiFlashErase(uint32_t StartAddress, uint32_t EndAddress)\n  385  {\n\n/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_flash.c:\n   36  //#include \"platform_config.h\"\n   37  #include \"stdio.h\"\n   38: #ifdef USE_MICO_SPI_FLASH\n   39  #include \"spi_flash.h\"\n   40  #endif\n   ..\n   62  /* Private macro -------------------------------------------------------------*/\n   63  /* Private variables ---------------------------------------------------------*/\n   64: #ifdef USE_MICO_SPI_FLASH\n   65  static sflash_handle_t sflash_handle = {0x0, 0x0, SFLASH_WRITE_NOT_ALLOWED};\n   66  #endif\n   ..\n   73  static OSStatus internalFlashByteWrite( volatile uint32_t* FlashAddress, uint8_t* Data ,uint32_t DataLength );\n   74  static OSStatus internalFlashFinalize( void );\n   75: #ifdef USE_MICO_SPI_FLASH\n   76  static OSStatus spiFlashErase(uint32_t StartAddress, uint32_t EndAddress);\n   77  #endif\n   ..\n   83  //     return internalFlashInitialize();    \n   84  //   }\n   85: // #ifdef USE_MICO_SPI_FLASH\n   86  //   else if(flash == MICO_SPI_FLASH){\n   87  //     if(sflash_handle.device_id)\n   ..\n  108      require_noerr(err, exit);\n  109    }\n  110: #ifdef USE_MICO_SPI_FLASH\n  111    else if( driver->peripheral->flash_type == FLASH_TYPE_SPI ){\n  112      err = init_sflash( &sflash_handle, 0, SFLASH_WRITE_ALLOWED );\n  ...\n  136  //     return internalFlashErase(StartAddress, EndAddress);    \n  137  //   }\n  138: // #ifdef USE_MICO_SPI_FLASH\n  139  //   else if(flash == MICO_SPI_FLASH){\n  140  //     if(StartAddress>=EndAddress || EndAddress > SPI_FLASH_END_ADDRESS)\n  ...\n  162      require_noerr(err, exit_with_mutex);\n  163    }\n  164: #ifdef USE_MICO_SPI_FLASH\n  165    else if( driver->peripheral->flash_type == FLASH_TYPE_SPI ){\n  166      err = spiFlashErase(StartAddress, EndAddress);\n  ...\n  190  //     return internalFlashWrite(FlashAddress, (uint32_t *)Data, DataLength);    \n  191  //   }\n  192: // #ifdef USE_MICO_SPI_FLASH\n  193  //   else if(flash == MICO_SPI_FLASH){\n  194  //     if( *FlashAddress + DataLength > SPI_FLASH_END_ADDRESS + 1)\n  ...\n  218      return internalFlashWrite(FlashAddress, (uint32_t *)Data, DataLength); \n  219    }\n  220: #ifdef USE_MICO_SPI_FLASH\n  221    else if( driver->peripheral->flash_type == FLASH_TYPE_SPI ){\n  222      err = sflash_write( &sflash_handle, *FlashAddress, Data, DataLength );\n  ...\n  250  //     return kNoErr;\n  251  //   }\n  252: // #ifdef USE_MICO_SPI_FLASH\n  253  //   else if(flash == MICO_SPI_FLASH){\n  254  //     if( *FlashAddress + DataLength > SPI_FLASH_END_ADDRESS + 1)\n  ...\n  278      *FlashAddress += DataLength;\n  279    }\n  280: #ifdef USE_MICO_SPI_FLASH\n  281    else if( driver->peripheral->flash_type == FLASH_TYPE_SPI ){\n  282      err = sflash_read( &sflash_handle, *FlashAddress, Data, DataLength );\n  ...\n  303  //     return internalFlashFinalize();    \n  304  //   }\n  305: // #ifdef USE_MICO_SPI_FLASH\n  306  //   else if(flash == MICO_SPI_FLASH){\n  307  //     sflash_handle.device_id = 0x0;\n  ...\n  328      require_noerr(err, exit); \n  329    }\n  330: #ifdef USE_MICO_SPI_FLASH\n  331    else if( driver->peripheral->flash_type == FLASH_TYPE_SPI ){\n  332      sflash_handle.device_id = 0x0;\n  ...\n  380  }\n  381  \n  382: #ifdef USE_MICO_SPI_FLASH\n  383  OSStatus spiFlashErase(uint32_t StartAddress, uint32_t EndAddress)\n  384  {\n\n/Users/William/Develop/MiCO/Platform/vendor/Freescale/MK64FxxL12/MicoDriverFlash.c:\n   36  #include \"Platform_common_config.h\"\n   37  #include \"stdio.h\"\n   38: #ifdef USE_MICO_SPI_FLASH\n   39  #include \"spi_flash.h\"\n   40  #endif\n   ..\n   47  const char* flash_name[] =\n   48  { \n   49: #ifdef USE_MICO_SPI_FLASH\n   50    [MICO_SPI_FLASH] = \"SPI\", \n   51  #endif\n   ..\n  124  }\n  125  \n  126: #ifdef USE_MICO_SPI_FLASH\n  127  OSStatus spiFlashErase(uint32_t StartAddress, uint32_t EndAddress)\n  128  {\n\n/Users/William/Develop/MiCO/Platform/vendor/nxp/LPC54xx/MicoDriverFlash.c:\n   36  #include \"Platform_common_config.h\"\n   37  #include \"stdio.h\"\n   38: #ifdef USE_MICO_SPI_FLASH\n   39  #include \"spi_flash.h\"\n   40  #endif\n   ..\n   63  /* Private macro -------------------------------------------------------------*/\n   64  /* Private variables ---------------------------------------------------------*/\n   65: #ifdef USE_MICO_SPI_FLASH\n   66  static sflash_handle_t sflash_handle = {0x0, 0x0, SFLASH_WRITE_NOT_ALLOWED};\n   67  #endif\n   ..\n   73  static OSStatus internalFlashByteWrite( uint32_t* FlashAddress, uint8_t* Data ,uint32_t DataLength );\n   74  static OSStatus internalFlashFinalize( void );\n   75: #ifdef USE_MICO_SPI_FLASH\n   76  static OSStatus spiFlashErase(uint32_t StartAddress, uint32_t EndAddress);\n   77  #endif\n   ..\n   87  \n   88    }\n   89: #ifdef USE_MICO_SPI_FLASH\n   90    else if(flash == MICO_SPI_FLASH){\n   91      if(sflash_handle.device_id) {\n   ..\n  111    \n  112    if(flash_spi_flag == 0) {\n  113: #ifdef USE_MICO_SPI_FLASH\n  114      MicoFlashInitialize(MICO_SPI_FLASH);\n  115  #endif\n  ...\n  119  \n  120    }\n  121: #ifdef USE_MICO_SPI_FLASH\n  122    else if(flash == MICO_SPI_FLASH){\n  123      if(StartAddress>=EndAddress || EndAddress > SPI_FLASH_END_ADDRESS)\n  ...\n  139    \n  140    if(flash_spi_flag == 0) {\n  141: #ifdef USE_MICO_SPI_FLASH\n  142      MicoFlashInitialize(MICO_SPI_FLASH);\n  143  #endif\n  ...\n  146      return internalFlashWrite(FlashAddress, (uint32_t *)Data, DataLength);    \n  147    }\n  148: #ifdef USE_MICO_SPI_FLASH\n  149    else if(flash == MICO_SPI_FLASH){\n  150      int returnVal = sflash_write( &sflash_handle, *FlashAddress, Data, DataLength );\n  ...\n  166    \n  167    if(flash_spi_flag == 0) {\n  168: #ifdef USE_MICO_SPI_FLASH\n  169      MicoFlashInitialize(MICO_SPI_FLASH);\n  170  #endif\n  ...\n  177      return kNoErr;\n  178    }\n  179: #ifdef USE_MICO_SPI_FLASH\n  180    else if(flash == MICO_SPI_FLASH){\n  181      \n  ...\n  201  \n  202    }\n  203: #ifdef USE_MICO_SPI_FLASH\n  204    else if(flash == MICO_SPI_FLASH){\n  205      sflash_handle.device_id = 0x0;\n  ...\n  227  }\n  228  \n  229: #ifdef USE_MICO_SPI_FLASH\n  230  OSStatus spiFlashErase(uint32_t StartAddress, uint32_t EndAddress)\n  231  {\n  ...\n  233    \n  234    if(flash_spi_flag == 0) {\n  235: #ifdef USE_MICO_SPI_FLASH\n  236      MicoFlashInitialize(MICO_SPI_FLASH);\n  237  #endif\n\n/Users/William/Develop/MiCO/Platform/vendor/Sample/Sample01/MicoDriverFlash.c:\n   36  #include \"Platform_common_config.h\"\n   37  #include \"stdio.h\"\n   38: #ifdef USE_MICO_SPI_FLASH\n   39  #include \"spi_flash.h\"\n   40  #endif\n   ..\n   47  const char* flash_name[] =\n   48  { \n   49: #ifdef USE_MICO_SPI_FLASH\n   50    [MICO_SPI_FLASH] = \"SPI\", \n   51  #endif\n   ..\n  124  }\n  125  \n  126: #ifdef USE_MICO_SPI_FLASH\n  127  OSStatus spiFlashErase(uint32_t StartAddress, uint32_t EndAddress)\n  128  {\n\n/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform.c:\n  190  platform_flash_driver_t platform_flash_drivers[MICO_FLASH_MAX];\n  191  \n  192: #if defined ( USE_MICO_SPI_FLASH )\n  193  \n  194  /* spi flash bus pins. Used by platform/drivers/spi_flash/spi_flash_platform.c */\n\n/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform.h:\n  289  \n  290  /* Components connected to external I/Os*/\n  291: #define USE_MICO_SPI_FLASH\n  292  #define SFLASH_SUPPORT_MACRONIX_PARTS \n  293  //#define SFLASH_SUPPORT_SST_PARTS\n\n54 matches across 12 files\n",
			"settings":
			{
				"buffer_size": 11817,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform_config.h",
			"settings":
			{
				"buffer_size": 6983,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform.c",
			"settings":
			{
				"buffer_size": 19375,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform.c",
			"settings":
			{
				"buffer_size": 14477,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Board/MiCOKit-F205/platform.c",
			"settings":
			{
				"buffer_size": 19878,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3162/platform.c",
			"settings":
			{
				"buffer_size": 15947,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/william/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_mcu_peripheral.h",
			"settings":
			{
				"buffer_size": 8543,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"",
				"Package Control: Install Package"
			],
			[
				"git",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"v",
				"View: Toggle Side Bar"
			],
			[
				"Cscope:Look up symbol",
				"Cscope: Look up symbol"
			],
			[
				":",
				"View: Toggle Tabs"
			],
			[
				":q",
				"Set Syntax: SQL"
			],
			[
				"Package Control: install		",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: Lorem ipsum"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform.h",
		"/Users/william/Develop/MiCO/Platform/drivers/spi_flash/spi_flash.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_mcu_peripheral.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_flash.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_uart.c",
		"/Users/William/Develop/MiCO/Platform/include/platform_peripheral.h",
		"/Users/William/Develop/MiCO/Platform/MCU/mico_platform_common.c",
		"/Users/William/Develop/MiCO/Projects/STM32F4xx/COM.MXCHIP.SPP/sublime/COM.MXCHIP.SPP.sublime-project",
		"/Users/William/Develop/MiCO/MICO/MICOMfgtest.c",
		"/Users/william/Develop/MiCO/Board/MiCOKit-3288/platform.h",
		"/Users/William/Develop/MiCO/MICO/MICOEntrance.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_flash.c",
		"/Users/william/Develop/MiCO/include/MicoDrivers/MICODriverI2c.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform_config.h",
		"/Users/William/Develop/MiCO/Platform/MCU/wlan_platform_common.c",
		"/Users/William/Develop/MiCO/Platform/include/wlan_platform_common.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/EMW1062_Driver/wlan_bus_sdio.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/EMW1088_Driver/wlan_bus.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/Wi-Fi_Bus_Driver/wlan_bus_sdio.c",
		"/Users/william/Develop/MiCO/Platform/include/wlan_platform_common.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/Wi-Fi_Bus_Driver/read_wifi_firmware.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform_config.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform_spi_flash.c",
		"/Users/william/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h",
		"/Users/william/Develop/MiCO/Platform/include/platform_peripheral.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3162/platform.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform_spi_flash.c",
		"/Users/william/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_mcu_peripheral.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOEntrance.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/EasyLink/EasyLink.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOConfigDelegate.c",
		"/Users/William/Library/Application Support/Sublime Text 2/Packages/SublimeClang/clang/include/stddef.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOBonjour.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoPlatform.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Board/MiCOKit-3088/platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Support/SocketUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/MCU/MX1101/peripherals/Libraries/inc/uart.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/MCU/STM32F2xx/peripherals/MicoDriverUart.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Support/SocketUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/MCU/STM32F2xx/RVMDK/startup_stm32f2xx_RVMDK.s",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Projects/STM32F4xx/COM.MXCHIP.SPP/sublime/COM.MXCHIP.SPP.sublime-project",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/STM32F2xx_Drv/startup_stm32f2xx_RVMDK.s",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M4/STM32F4xx/STM32F4xx_Drv/startup_stm32f2xx_IAR.s",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOAppEntrance.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/IDEs/Keil/patch_keil.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/stm32f2xx_platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/json_util.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/STM32F2xx_Drv/startup_stm32f2xx_bootloader_IAR.s",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICODefine.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/Common.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/MICO_EVB_1/platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/STM32F2xx_Drv/STM32F2xx_StdPeriph_Driver/CMSIS/core_cmInstr.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoAlgorithm.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MICORTOS.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoSocket.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/Common.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/StringUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/StringUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/crt0_IAR.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/STM32F2xx_Drv/startup_stm32f2xx_IAR.s",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOMfgtest.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/crt0.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/HTTPUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOParaStorage.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/HTTPUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOConfigServer.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/FatFs/src/ff_gen_drv.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/FatFs/src/diskio.h",
		"/Users/william/Develop/Clang_lib/ARMCC/include/stdio.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOAppDefine.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/platform_common_config.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.HA/HaProtocol.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoRTOS.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICONotificationCenter.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2XX/STM32F2XX_Drv/STM32F2xx_StdPeriph_Driver/inc/stm32f2xx_rcc.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoWlan.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/FatFs/src/integer.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.Apple.HomeKit/HomeKitUserInterface.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.Apple.HomeKit/MICOAppDefine.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/include/MICO.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.Apple.HomeKit/MicoDefaults.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/HTTPUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/MICO_EVB_1/platform.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoWlan.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICONotificationCenter.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/EasyLink/EasyLink.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/include/platform_sleep.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/MicoDriverFlash.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/hardfault.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/rtc.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/rtc.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/wlan_platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/IAR/stdio_IAR.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/platform.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/include/PlatformLogging.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/platform_common_config.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/read_wifi_firmware.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoPlatform.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/TimeUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/Mico.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/platform_internal_gpio.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/inc/MICOWlan.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDefaults.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoRTOS.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/platform_assert.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/SDIO/wlan_bus.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/SDIO/wlan_bus.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoAES.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/MicoDriverI2c.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/MicoDriverGpio.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDrivers/MicoDriverFlash.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/EMW1062_platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDrivers/MicoDriverAdc.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDrivers/MicoDriverGpio.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDrivers/MicoDriverI2c.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDrivers/MicoDriverPwm.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDrivers/MicoDriverRng.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDrivers/MicoDriverRtc.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDrivers/MicoDriverSpi.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDrivers/MicoDriverUart.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoDrivers/MicoDriverWdg.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MICO.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/PlatformFlash.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/WAC/WAC.c"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<open folders>",
			"",
			"<open folders>",
			"/Users/william/Develop/E-DICE",
			"",
			"<open folders>",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/Project/复件 Data_Send&Recv",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/Project/STM32F4xx_StdPeriph_Examples"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"USE_MICO_SPI_FLASH",
			"EMW1062",
			"MICO_DEFAULT_TICK_RATE_HZ",
			"MCU_CLOCK_HZ",
			"generic_sflash_command",
			"spi_baudrate_prescalers",
			"calculate_prescaler",
			"sflash_platform_send_recv",
			"generic_sflash_command",
			"flash",
			"platform_uart_stop_bits_t",
			"platform_spi_slave_transfer_status_t",
			"i2c",
			"ssid_get",
			"get_line",
			"host_enable_oob_interrupt",
			"host_platform_get_oob_interrupt_pin",
			"bootloader_start",
			"sdio_int_pin_irq_handler",
			"sdio_oob_irq_handler",
			"sdio_enable_it_irq",
			"sdio_enable_bus_irq",
			"host_enable_oob_interrupt",
			"FLASH_PIN_SPI_CS",
			"wiced_platform_notify_irq",
			"sdio_oob_irq_handler",
			"WL_GPIO1",
			"sdio_irq",
			"MICO_I2C_1",
			"MICO_UNUSED",
			"platform_i2c_peripherals",
			"platform_i2c_per",
			"BuartExFifoInit",
			"SocketAccept",
			"MicoSystemStandBy",
			"hard_fault_handler_c",
			"init_platform",
			"mico_get_time",
			"sys_command",
			"sys_command.o",
			"fwrite",
			"fopen",
			"freopen",
			"fopen",
			"mico_mutex_t",
			"RTC_WKUP_irq",
			"bootloader_start",
			"WEAK",
			"ICC",
			"EXTI3_IRQHandler",
			"InitMd5",
			"sys_state_change_sem",
			"PlatformEasyLinkButtonLongPressedCallback",
			"str",
			"strdump",
			"strd",
			"strdump",
			"memrlen",
			"strnlen",
			"memrlen",
			"size_t",
			"READ_LENGTH",
			"CR",
			"findChunkedDataLength",
			"1500",
			"findChunkedDataLength",
			"realloc",
			"findChunkedDataLength",
			"->chunkedData =",
			"chunk",
			"findChunkedDataLength",
			"HTTPHeaderParse",
			"chunck",
			"inHeader->chunkedData =",
			"inHeader->chunkedData",
			"otaDataPtr",
			"HTTPHeaderClear",
			"unlock",
			"dataEndedbyClose",
			"onClear",
			"flashStorageAddress",
			"  /* For MXCHIP OTA function, store extra data to OTA data temporary */\n//   err = HTTPGetHeaderField( inHeader->buf, inHeader->len, \"Content-Type\", NULL, NULL, &value, &valueSize, NULL );\n\n//   if(err == kNoErr && strnicmpx( value, valueSize, kMIMEType_MXCHIP_OTA ) == 0){\n// #ifdef MICO_FLASH_FOR_UPDATE  \n//     http_utils_log(\"Receive OTA data!\");    \n//     flashStorageAddress = UPDATE_START_ADDRESS;\n//     err = MicoFlashInitialize( MICO_FLASH_FOR_UPDATE );\n//     require_noerr(err, exit);\n//     err = MicoFlashErase(MICO_FLASH_FOR_UPDATE, UPDATE_START_ADDRESS, UPDATE_END_ADDRESS);\n//     require_noerr(err, exit);\n//     err = MicoFlashWrite(MICO_FLASH_FOR_UPDATE, &flashStorageAddress, (uint8_t *)end, inHeader->extraDataLen);\n//     require_noerr(err, exit);\n// #else\n//     http_utils_log(\"OTA flash memory is not existed!\");\n//     err = kUnsupportedErr;\n// #endif\n//     goto exit;\n//   }",
			"HTTPHeaderClear\nHTTPHeaderClear",
			"HTTPHeaderClear",
			"dataEndedbyClose",
			"onReceivedData",
			"writeToFlash",
			"onReceivedData",
			"crea",
			"mico_notify_WIFI_SCAN_COMPLETE_function",
			"HTTPHeaderCreate",
			"_ConnectToMfgAP",
			"stop_mode_power_down_hook",
			"_button_STANDBY_irq_handler",
			"%f",
			"lf",
			"_cleanEasyLinkResource",
			"_Led_EL_timer",
			"ConfigWillStop",
			"ConfigWillStop\nConfigWillStop",
			"_FTCRespondInComingMessage",
			"easylink_sem",
			"easylink_thread",
			"easylinkClient_fd",
			"_cleanEasyLinkResource",
			"stopEasyLink",
			"EasyLinkNotify_SYSWillPowerOffHandler",
			"str2hex",
			"easylink_thread",
			"rtc",
			"_PlatformFlashByteWrite",
			"APP_HDR_START_ADDR",
			"The MIT License",
			"__IO",
			"network_InitTypeDef_st",
			"MICO_RF_LED",
			"C000",
			"800C000",
			"host_platform_reset_wifi",
			"WL_RESET_BANK",
			"find_optimal_block_size",
			"host_platform_enable_high_speed_sdio",
			"sdio_prepare_data_transfer",
			"WL_GPIO0_BANK",
			"host_platform_init",
			"host_platform_bus_init",
			"WL_GPIO0_BANK",
			"SPI_IRQ_BANK"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"MICO",
			"MICO_DISABLE_STDIO"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/William/Develop/MiCO/Platform/Drivers/spi_flash/spi_flash.c",
					"settings":
					{
						"buffer_size": 15377,
						"regions":
						{
						},
						"selection":
						[
							[
								865,
								865
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1347.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform.h",
					"settings":
					{
						"buffer_size": 4637,
						"regions":
						{
						},
						"selection":
						[
							[
								4039,
								4013
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1857.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"settings":
					{
						"buffer_size": 11817,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										176,
										194
									],
									[
										509,
										527
									],
									[
										705,
										723
									],
									[
										1043,
										1061
									],
									[
										1252,
										1270
									],
									[
										1481,
										1499
									],
									[
										1740,
										1758
									],
									[
										2049,
										2067
									],
									[
										2253,
										2271
									],
									[
										2428,
										2446
									],
									[
										2698,
										2716
									],
									[
										2923,
										2941
									],
									[
										3196,
										3214
									],
									[
										3414,
										3432
									],
									[
										3651,
										3669
									],
									[
										3861,
										3879
									],
									[
										4118,
										4136
									],
									[
										4297,
										4315
									],
									[
										4465,
										4483
									],
									[
										4727,
										4745
									],
									[
										4986,
										5004
									],
									[
										5295,
										5313
									],
									[
										5499,
										5517
									],
									[
										5674,
										5692
									],
									[
										5944,
										5962
									],
									[
										6169,
										6187
									],
									[
										6442,
										6460
									],
									[
										6695,
										6713
									],
									[
										6932,
										6950
									],
									[
										7142,
										7160
									],
									[
										7399,
										7417
									],
									[
										7578,
										7596
									],
									[
										7746,
										7764
									],
									[
										8016,
										8034
									],
									[
										8143,
										8161
									],
									[
										8249,
										8267
									],
									[
										8510,
										8528
									],
									[
										8769,
										8787
									],
									[
										9069,
										9087
									],
									[
										9223,
										9241
									],
									[
										9391,
										9409
									],
									[
										9511,
										9529
									],
									[
										9716,
										9734
									],
									[
										9914,
										9932
									],
									[
										10133,
										10151
									],
									[
										10271,
										10289
									],
									[
										10384,
										10402
									],
									[
										10525,
										10543
									],
									[
										10692,
										10710
									],
									[
										10936,
										10954
									],
									[
										11063,
										11081
									],
									[
										11169,
										11187
									],
									[
										11431,
										11449
									],
									[
										11682,
										11700
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								11137,
								11137
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 4340.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform_config.h",
					"settings":
					{
						"buffer_size": 6983,
						"regions":
						{
						},
						"selection":
						[
							[
								5205,
								5205
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1126.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform.c",
					"settings":
					{
						"buffer_size": 19375,
						"regions":
						{
						},
						"selection":
						[
							[
								9889,
								9361
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3100.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform.c",
					"settings":
					{
						"buffer_size": 14477,
						"regions":
						{
						},
						"selection":
						[
							[
								8552,
								8552
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2781.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/Users/William/Develop/MiCO/Board/MiCOKit-F205/platform.c",
					"settings":
					{
						"buffer_size": 19878,
						"regions":
						{
						},
						"selection":
						[
							[
								13466,
								13227
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4204.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3162/platform.c",
					"settings":
					{
						"buffer_size": 15947,
						"regions":
						{
						},
						"selection":
						[
							[
								10669,
								10323
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3168.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/Users/william/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_mcu_peripheral.h",
					"settings":
					{
						"buffer_size": 8543,
						"regions":
						{
						},
						"selection":
						[
							[
								5843,
								5843
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 146.0
	},
	"output.exec":
	{
		"height": 100.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"micode",
				"MICO/MICODefine.h"
			],
			[
				"",
				"STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true
}
